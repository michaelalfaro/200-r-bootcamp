library(snow)
install.packages("snow")
install.packages("BioGeoBEARS", dependencies=TRUE, repos="http://cran.rstudio.com")
install.packages("Rcpp", dependencies=TRUE)
install.packages("RcppArmadillo", dependencies=TRUE)
install.packages("gdata", dependencies=TRUE)
install.packages("gtools", dependencies=TRUE)
install.packages("xtable", dependencies=TRUE)
install.packages("plotrix", dependencies=TRUE)
install.packages("vegan", dependencies=TRUE)
install.packages("FD", dependencies=TRUE)
install.packages("SparseM", dependencies=TRUE)
install.packages("ape", dependencies=TRUE)
install.packages("phylobase", dependencies=TRUE)
install.packages("rexpokit", dependencies=TRUE)
install.packages("cladoRcpp", dependencies=TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("devtools")
library(devtools)
devtools::install_github(repo="nmatzke/BioGeoBEARS", INSTALL_opts="--byte-compile", dependencies=FALSE)
=
install.packages("devtools")
install.packages("statmod")
np(system.file("extdata", package="BioGeoBEARS"))
library("BioGeoBEARS")
library(phytools)
?OUwie
library(OUwie)
?OUwie
install.packages("optimx", dependencies=TRUE, repos="http://cran.rstudio.com")
install.packages("snow")
library(snow)
install.packages("phylobase", dependencies=TRUE, repos="http://cran.rstudio.com")
dat <- read.csv("/Users/michaelalfaro/Dropbox/teaching/EEB-174-2019/final grades uploaded/final_grade.csv")
dat
dat <- read.csv("/Users/michaelalfaro/Dropbox/teaching/EEB-174-2019/final grades uploaded/final_grade.csv", header = F)
dat
dat <- read.csv("/Users/michaelalfaro/Dropbox/teaching/EEB-174-2019/final grades uploaded/final_grade.csv", header = F, as.is = T)
dat$V1
dat <- read.csv("/Users/michaelalfaro/Dropbox/teaching/EEB-174-2019/final grades uploaded/final_grade.csv", header = F, as.is = T, colClasses = ="character")
dat <- read.csv("/Users/michaelalfaro/Dropbox/teaching/EEB-174-2019/final grades uploaded/final_grade.csv", header = F, as.is = T, colClasses = "character")
dat
write.csv2(dat. "grades.csv, sep = ",")
write.csv2(dat. "grades.csv, sep = ",")
install.packages("castor")
library(castor)
params = list(birth_rate_intercept  = 0,
birth_rate_factor     = 1,
birth_rate_exponent   = 1,
death_rate_intercept  = 0,
death_rate_factor     = 0.05,
death_rate_exponent   = 1.3,
rarefaction           = 1)
simulation = generate_random_tree(params,max_time_eq=1,coalescent=TRUE)
tree = simulation$tree
time_span = simulation$final_time - simulation$root_time
cat(sprintf("Generated tree has %d tips, spans %g time units\n",length(tree$tip.label),time_span))
counter = count_lineages_through_time(tree, times=seq(0,0.99*time_span,length.out=100))
print(counter$lineages)
# reconstruct diversification dynamics based on diversity time series
results = reconstruct_past_diversification( counter$times,
counter$lineages,
coalescent      = TRUE,
smoothing_span  = 3,
smoothing_order = 1)
# print reconstructed total diversities
print(results$total_diversities)
# plot coalescent and reconstructed true diversities
matplot(x     = counter$times,
y     = matrix(c(counter$lineages,results$total_diversities), ncol=2, byrow=FALSE),
type  = "b",
xlab  = "time",
ylab  = "# clades",
lty   = c(1,2), pch = c(1,0), col = c("red","blue"))
legend( "topleft",
legend  = c("coalescent (simulated)","true (reconstructed)"),
col     = c("red","blue"), lty = c(1,2), pch = c(1,0));
params = list(birth_rate_intercept  = 0,
birth_rate_factor     = 1,
birth_rate_exponent   = 1,
death_rate_intercept  = 0,
death_rate_factor     = 0.05,
death_rate_exponent   = 1.3,
rarefaction           = 1)
simulation = generate_random_tree(params,max_time_eq=1,coalescent=FALSE)
tree = simulation$tree
time_span = simulation$final_time - simulation$root_time
cat(sprintf("Generated tree has %d tips, spans %g time units\n",length(tree$tip.label),time_span))
# Calculate diversity time series from the tree
counter = count_lineages_through_time(tree, times=seq(0,0.99*time_span,length.out=100))
# print true diversities
print(counter$lineages)
# reconstruct diversification dynamics based on diversity time series
results = reconstruct_past_diversification( counter$times,
counter$lineages,
birth_rates_pc  = params$birth_rate_factor,
coalescent      = FALSE,
smoothing_span  = 3,
smoothing_order = 1)
print(results$coalescent_diversities)
matplot(x     = counter$times,
y     = matrix(c(results$coalescent_diversities,counter$lineages), ncol=2, byrow=FALSE),
type  = "b",
xlab  = "time",
ylab  = "# clades",
lty   = c(1,2), pch = c(1,0), col = c("red","blue"))
legend( "topleft",
legend  = c("coalescent (reconstructed)","true (simulated)"),
col     = c("red","blue"), lty = c(1,2), pch = c(1,0));
install.packages("fishtree")
?fishtree
setwd("~/Dropbox/natural_history_diversification_analyses/")
library(geiger)
library(BAMMtools)
library(dplyr)
library(dplyr)
library(readr)
library(ggplot2)
library(ggplot2)
library(ggtree)
install.packages("ggtree")
385/2
192 + 620 + 30
24 * 31
744 + 249
511 *36
18396 -4000
14396 / 36
18396 + 18922
37318 + 7500
2100000/10
210000/12
2100000/30
70000/12
45910-3180
.00136 * 2400
413.90 * 2 + 49 * 2
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
datapath = "~/Dropbox/CSB/CSB/data_wrangling/sandbox/"
setwd(datapath)
popsize <- read_tsv("../data/FauchaldEtAl2017/pop_size.csv")
knitr::opts_chunk$set(echo = FALSE)
popsize <- read_csv("../data/FauchaldEtAl2017/pop_size.csv")
library(tidyverse)
devtools::install_github("r-lib/rlang")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::install_github("r-lib/rlang")
install.packages("tidyverse")
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE)
datapath = "~/Dropbox/CSB/CSB/data_wrangling/sandbox/"
setwd(datapath)
popsize <- read_tsv("../data/FauchaldEtAl2017/pop_size.csv")
popsize <- read_tsv("~/Dropbox/CSB/CSB/data_wrangling/data/FauchaldEtAl2017/pop_size.csv")
popsize
popsize
popsize
head(popsize(3))
head(popsize, 3)
popsize
head(popsize, 3)
popsize
head(popsize, 3)
tail(popsize, 3)
view(popsize)
glimpse(popsize)
dim(popsize)
datapath = "~/Dropbox/CSB/CSB/data_wrangling/data/FauchaldEtAl2017/ndvi.csv"
ndvi <- read_tsv(datafile)
datapath = "~/Dropbox/CSB/CSB/data_wrangling/data/FauchaldEtAl2017/ndvi.csv"
ndvi <- read_tsv(datapath)
datapath = "~/Dropbox/CSB/CSB/data_wrangling/data/FauchaldEtAl2017/ndvi.csv"
ndvi <- read_tsv(datapath)
head(ndvi)
glimpse(ndvi.csv)
newdata <- select(ndvi, Herd, NDVI_May)
datapath = "~/Dropbox/CSB/CSB/data_wrangling/data/FauchaldEtAl2017/ndvi.csv"
ndvi <- read_tsv(datapath)
head(ndvi)
glimpse(ndvi.csv)
newdata <- select(ndvi, Herd, NDVI_May)
glimpse(ndvi)
> select(ndvi, Herd:NDVI_May)
# use a minus sign to exclude specific columns
> select(ndvi, -Herd, -Year)
# you can combine the two features
> select(ndvi, -(Year:NDVI_May))
# use a regular expression for the name of the column > select(ndvi, matches("NDV"))
#use a colon to include all columns in between
select(ndvi, Herd:NDVI_May)
# use a minus sign to exclude specific columns
select(ndvi, -Herd, -Year)
# you can combine the two features
select(ndvi, -(Year:NDVI_May))
# use a regular expression for the name of the column > select(ndvi, matches("NDV"))
herds <- popsize %>%
select(Herd) %>%
distinct() %>%
arrange(Herd)
herds
glimpse(popsize)
Intermezzo 9.1
(a) Extract the unique Years in popsize and order them.
(b) Find the row in ndvi with the largest NDVI_May.
(c) List the three years with the largest Pop_Size for the Herd called WAH.
Performthis operation in two different ways.
unique(popsize)
unique(popsize, Years)
unique(popsize, Year)
select(popsize) %>% distinct(Year)
select(popsize) %>% distinct(Years)
popsize %>% select(Years) %>% distinct()
glimpse(popsize)
popsize %>% select(Year) %>% distinct()
years <-popsize %>% select(Year) %>% distinct() %>% arrange(popsize)
popsize %>% select(Year) %>% distinct() %>% arrange(popsize)
popsize %>% select(Year) %>% distinct() %>% arrange(Year)
years <- popsize %>% select(Year) %>% distinct() %>% arrange(Year)
top_n( nvdi, 5, NDVI_May)
top_n( ndvi, 5, NDVI_May)
filter(ndvi, WAH)
ndvi %>% filter(Herd = "WAH")
ndvi %>% filter(Herd == "WAH")
ndvi %>% filter(Herd == "WAH") %>% top_n(5, popsize)
glimpse(ndvi)
glimpse(popsize)
popsize %>% filter(Herd == "WAH") %>% top_n(5, Pop_Size)
ndvi %>% filter(Herd == "WAH") %>% top_n(5, popsize)
top_n( ndvi, 5, NDVI_May)
ndvi %>% summarise(mean_May = mean(NDVI_May)
, sd_May = sd(NDVI_May)
, median_May = median(NDVI_May))
popsize %>% group_by(Herd) %>%
summarise(avgPS = mean(Pop_Size), minPS = min(Pop_Size),
maxPS = max(Pop_Size)) %>%
arrange(Herd)
# This is a better routine to load large data sets
# part of package readr
dt <- read_csv("https://goo.gl/W4SSdj",
locale = locale(encoding = "latin1"))
knitr::opts_chunk$set(echo = TRUE)
dt <- read_csv("https://goo.gl/W4SSdj",
locale = locale(encoding = "latin1"))
head(dt) # first few rows
tail(dt) # last few rows
glimpse(dt) # structure
View(dt) # spreadsheet
```
nrow(dt[dt$Artist == "The Beatles" & dt$Genre == "Rock",])
as.integer(names(sort(table(dt$Year[dt$Genre == "Rock"] %/% 10),
decreasing = TRUE)[1])) * 10
dt %>%
filter(Genre == "Rock", Artist == "The Beatles") %>%
tally()
dt <- read_csv("https://goo.gl/W4SSdj",
locale = locale(encoding = "latin1"))
nrow(dt[dt$Artist == "The Beatles" & dt$Genre == "Rock",])
glimpse(dt)
dt %>%
select(Artist) %>%
head(3)
# by name (regex etc)
dt %>%
select(starts_with("A")) %>%
head(2)
# distinct rows
dt %>% select(Artist) %>% distinct()
Ordering
dt %>% arrange(Artist) %>% head(3)
dt %>% arrange(desc(Artist), Year) %>% head(3)
# as a function of current cols
dt %>% mutate(decade = (Year %/% 10) * 10) %>% head(3)
dt %>%
select(Artist) %>%
mutate(namelen = nchar(Artist)) %>%
summarise(min = min(namelen),
mean = mean(namelen),
median = median(namelen),
stdev = sd(namelen),
max = max(namelen))
# Number of top albums by genre
dt %>% group_by(Genre) %>% tally() %>% arrange(desc(n))
dt %>% group_by(Genre) %>% tally() %>% arrange(desc(n))
dt %>%
select(Artist, Year) %>%
arrange(Year) %>%
add_column(tmp = 1) %>%
group_by(Artist) %>%
mutate(num = cumsum(tmp)) %>%
filter(Artist %in% c("The Beatles", "Bob Dylan"))
# Number of albums by Genre/Year
dt %>% group_by(Year, Genre) %>% tally()
dt %>% group_by(Year, Genre) %>% tally()
dt
dt %>% group_by(Year, Genre) %>% tally()
for_heatmap <- dt %>%
select(Artist, Year) %>%
distinct() %>%
add_column(tmp = 1) %>%
spread(Year, tmp, fill = 0) %>%
gather(Year, Top, -Artist)
for_heatmap %>%
ggplot()+ aes(x = Year, y = Artist, fill = as.factor(Top)) + geom_tile() + scale_fi
library(ggplot2)
for_heatmap %>%
ggplot()+ aes(x = Year, y = Artist, fill = as.factor(Top)) + geom_tile() + scale_fi
for_heatmap %>%
ggplot()+ aes(x = Year, y = Artist, fill = as.factor(Top)) + geom_tile() + scale_fill_manual(values = c("white", "black"))
library(tidyverse)
library(tidyverse)
datapath = "~/Dropbox/CSB/CSB/data_wrangling/sandbox/"
setwd(datapath)
popsize <- read_tsv("~/Dropbox/CSB/CSB/data_wrangling/data/FauchaldEtAl2017/pop_size.csv")
for(ii in 1:9){ cat("*&")
if (ii>8){
cat("*") }
}
1300/30
942 /6
756 /12
756 /6
3200 + 20 + 300 + 157 + 141
746 * .6
746 * .4
591 * 12
3000 / 12
1.75 * .75
setwd("~/Dropbox/bootcamp_examples")
getwd()
setwd("~/Dropbox/bootcamp_examples")
getwd()
setwd("~/Dropbox/bootcamp_examples")
getwd()
setwd("~/Dropbox/bootcamp_examples")
getwd()
setwd("~/Dropbox/bootcamp_examples")
getwd()
setwd("~/Dropbox/bootcamp_examples")
getwd()
2 + 2
help(lm)
?lm
?c
??lm
grad.school.tips <- c( "use a reference manager", "learn a programming language", "write lots of papers")
cat(grad.school.tips, sep = "\n")
install.packages(c("geiger", "laser"), dep = T)
install.packages(c("geiger", "ouwie"), dep = T)
install.packages(c("geiger", "OUwie"), dep = T)
install.packages(c("geiger", "picante"), dep = T)
xx <-1000
ls()
ls()
rm(xx)
ls()
getwd()
source("~/Dropbox/bootcamp_examples/source.example.R")
#make sure the path to the source file is specified correctly (should equal output from getwd())
all.I.know.about.life.I.learned.in.grad.school() #a function from the source file
tt <- read.tree("~/Dropbox/bootcamp_examples/tree.tre")
library(ape)
library(ape)
tt <- read.tree("~/Dropbox/bootcamp_examples/tree.tre")
###see elements of an object
attributes(tt)
###access those elements with $
tt$tip.label[1:10]
pruned.tree <- drop.tip(tt, tt$tip.label[1:7900])
plot(ladderize(pruned.tree), cex = 0.5, type = "radial")
# d contains length data, family, species, order, etc
inpath = "~/Dropbox/bootcamp_examples/data.txt"
dd <- read.table(inpath, header=T, sep='\t', as.is = T);
str(dd)
#a data frame is a collection of columns where every object within the column vector is the same data type
#get the dimensions of a data frame
dim(dd)
length.dd <- dim(dd)[1] #what does this line do?
#dimensions are rows, columns
attributes(dd)
#get 92 random variables
size <- runif(length.dd)
#you can add columns to an existing data frame with cbind
head(dd) #before
dd<- cbind(dd, size)
names(dd) #these are the names of the columns we could access
#dd$species #all the species
head(dd$species)
tail(dd$species) # use these functions to check that data has been read into R correctly
#you can pull out individual columns
swimming_mode <- dd$mode
dd[1,1] # entry in row 1, column 1
dd[1,2] # entry in row 1, column 2
dd[1,3] # entry in row 1, column 3
dd[1,] # row 1, all columns
dd[,2] # all rows, column 2
head(rownames(dd))
rownames(dd) <- dd$species
head(rownames(dd))
str(dd)
# if you name the columns you can access a row by name
dd['Pomacentrus_brachialis',]
#a bit on subseting
dd[5:10,] # rows 5-10, all columns
dd[5:10,3] # rows 5-10, column 3
#if you want only the MPF swimmers, you can use the which() function
which(dd$mode == 'MPF')
mpfs <- which(dd$mode == 'MPF') #stores rows of mpf swimmers
mpf_swimmers <- dd[mpfs,] #stored this as a seperate df
head(mpf_swimmers)
head(dd)
which(dd$size > 0.9) #shows us rows with large fish in them
big.fish <- dd[which(dd$size > 0.9),] #remember the , after the which command says "select all columns"
head(big.fish)
#ways to check for NAs
head(dd) # there are NAs in the data
head(is.na(dd))
which(is.na(dd$mode)) #item 2
complete.cases(dd)
#one way to get only complete cases
cleaned_1 <- dd[complete.cases(dd),]
#another
cleaned_2 <- na.omit(dd)
dd <- cleaned_1
dd <- cleaned_1
dd <- cleaned_1
setdiff(dd$species, tt$tip.label)
dd$species[which(dd$species == 'Chaetodon_plebius')]<-'Chaetodon_plebeius' #taxonomic inconsistency
dd$species[which(dd$species == 'Chaetodon_plebius')]<-'Chaetodon_plebeius' #taxonomic inconsistency
del_from_data <- setdiff(dd$species, tt$tip.label)
# tips with data not in tree
del_from_data
#keep all species in data file except those that match the del_from_data
pruned_data <- dd[!(dd$species %in% del_from_data),]
setdiff(pruned_data$species, tt$tip.label) # this should produce "character(0)" if empty.
not.in.dd <-setdiff(tt$tip.label, pruned_data$species )
length(not.in.dd) #this will be a large number because the tree has so many tips!
head(not.in.dd)
pruned.tree <- drop.tip(tt, not.in.dd)
setdiff(pruned.tree$tip.label, pruned_data$species) #should be "character 0" if these objects match
plot(pruned.tree, type = "radial",cex = 0.5)
pruned.tree <- drop.tip(tt, not.in.dd)
setdiff(pruned.tree$tip.label, pruned_data$species) #should be "character 0" if these objects match
plot(pruned.tree, type = "radial",cex = 0.5)
```{r}
pruned.tree <- drop.tip(tt, not.in.dd)
setdiff(pruned.tree$tip.label, pruned_data$species) #should be "character 0" if these objects match
plot(pruned.tree, type = "radial",cex = 0.5)
xx <- 10
while (xx < 11){
xx <- xx + 0
cat(xx, "\n")
}
xx <- 10
while (xx < 11){
xx <- xx + 1
cat(xx, "\n")
}
```{r eval=F}
tt <- read.tree("~/Dropbox/bootcamp_examples/tree.tre")
###see elements of an object
attributes(tt)
###access those elements with $
tt$tip.label[1:10]
head(tt$tip.label)
setwd("flow_control_in_R.Rmd")
getwd()
setwd("/Users/michaelalfaro/Dropbox/git/bootcamp2019/eeb201/assets/flow")
setwd("/Users/michaelalfaro/Dropbox/git/bootcamp2019/eeb201/assets/")
ls
purl("flow_control_in_R.Rmd")
install.packages("purl")
setwd("~/Dropbox/bootcamp_examples")
setwd("~/Dropbox/bootcamp_examples")
getwd()
getwd()
2+ 3
help(lm)
require(graphics)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D90 <- lm(weight ~ group - 1) # omitting intercept
anova(lm.D9)
summary(lm.D90)
?lm
?c
??read.tree
grad.school.tips <- c( "use a reference manager", "learn a programming language", "write lots of papers")
grad.school.tips = c( "use a reference manager", "learn a programming language", "write lots of papers")
grad.school.tips <- c( "use a reference manager", "learn a programming language", "write lots of papers")
2 + 6 -> xx
xx
cat(grad.school.tips, sep = "\n")
install.packages(c("geiger", "picante"), dep = T)
library(geiger)
ls()
rm(xx)
ls()
ls()
rm(list=ls())
ls()
source("~/Dropbox/bootcamp_examples/source.example.R")
#make sure the path to the source file is specified correctly (should equal output from getwd())
all.I.know.about.life.I.learned.in.grad.school() #a function from the source file
